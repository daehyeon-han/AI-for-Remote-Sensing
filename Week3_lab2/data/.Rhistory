install.packages('randomForest')
library('randomForest')
randomForest()
install.packages('extraTrees')
library(extraTrees)
install.packages('extraTrees')
install.packages('extraTrees')
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
library(Metrics)
## Loading ExtraTrees
library(extraTrees)
library(Metrics)
library(caret)
## Read the data file
setwd('/Users/dhan/Dropbox/Archive/_coursework/2018_1st/AI_RS/week3/Week3_lab2/data')
calib <- read.csv(file="classification_tr.csv")
names(calib)
n <- ncol(calib)
x <- calib[,1:(n-1)]
y <- calib[,n]
## Regression with ExtraTrees
et <- extraTrees(x, y, ntree=500, mtry=5, nodesize=5, numRandomCuts=2)
yhat <- predict(et,x)
rmse(y,yhat)
## Loading ExtraTrees
library(extraTrees)
library(Metrics)
library(caret)
## Read the data file
setwd('/Users/dhan/Dropbox/Archive/_coursework/2018_1st/AI_RS/week3/Week3_lab2/data')
# https://github.com/mananshah99/rotationforest
## 1. Install the rotationForest package from github ------------------
install.packages('devtools') # Only if needed
require('devtools')
devtools::install_github('mananshah99/rotationforest')
require('rotationForest')
## 2. Install other librarys ------------------------------------------
install.packages('Metrics')
install.packages("Metrics")
install.packages('caret')
setwd("/Users/dhan/Dropbox/Archive/_coursework/2018_1st/AI_RS/week3/Week3_lab2/data")
## 3. Read calibration files ------------------------------------------
# classification
data <- read.table("classification_tr.csv", sep = ",", header = TRUE)
names(data)
n <- ncol(data)
data.dependent <- data[,1:(n-1)]
data.response <- data[,n]
data.response <- as.factor(data.response) # for calibration
## 4. rotation forest: rotationForest(x, y, K, L) ---------------------
rotF <- rotationForest(data.dependent, data.response, 3, 10, verbose = FALSE)
library(rotationForest)
library(Metrics)
library(caret)
## 3. Read calibration files ------------------------------------------
# classification
data <- read.table("classification_tr.csv", sep = ",", header = TRUE)
names(data)
n <- ncol(data)
data.dependent <- data[,1:(n-1)]
data.response <- data[,n]
data.response <- as.factor(data.response) # for calibration
## 4. rotation forest: rotationForest(x, y, K, L) ---------------------
rotF <- rotationForest(data.dependent, data.response, 3, 10, verbose = FALSE)
cali_predict <- predict(rotF, data.dependent, prob = FALSE)
## 5. calibration accuracy --------------------------------------------
mean(data.response==cali_predict)
# accuracy assessment
confusionMatrix(data.response, cali_predict)
## 6. Validation ------------------------------------------------------
valid <- read.table("classification_va.csv", sep = ",", header = TRUE)
n_vali <- ncol(valid)
x_vali <- valid[,1:(n-1)]
y_vali <- valid[,n]
y_vali <- as.factor(y_vali) # for calibration
vali_predict <- predict(rotF,x_vali, prob = FALSE)
## 7. validation accuracy --------------------------------------------
mean(y_vali==vali_predict)
# accuracy assessment
confusionMatrix(y_vali, vali_predict)
rotF
## 4. rotation forest: rotationForest(x, y, K, L) ---------------------
rotF <- rotationForest(data.dependent, data.response, 3, 10, verbose = FALSE)
cali_predict <- predict(rotF, data.dependent, prob = FALSE)
## 5. calibration accuracy --------------------------------------------
mean(data.response==cali_predict)
# accuracy assessment
confusionMatrix(data.response, cali_predict)
## 6. Validation ------------------------------------------------------
valid <- read.table("classification_va.csv", sep = ",", header = TRUE)
n_vali <- ncol(valid)
x_vali <- valid[,1:(n-1)]
y_vali <- valid[,n]
y_vali <- as.factor(y_vali) # for calibration
vali_predict <- predict(rotF,x_vali, prob = FALSE)
## 7. validation accuracy --------------------------------------------
mean(y_vali==vali_predict)
# accuracy assessment
confusionMatrix(y_vali, vali_predict)
